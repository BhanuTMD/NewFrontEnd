// import React, { useState } from "react";
// import axios from "axios";
// import FooterBar from "Components/common/footer";
// // import Header from "Components/common/header";
// import NavBar from "Components/common/navBar";
// import Section from "Components/common/section";
// import { Formik, Field, Form, ErrorMessage } from "formik";
// import * as Yup from "yup";
// import Swal from "sweetalert2";
// import DatePicker from "react-datepicker";
// import "react-datepicker/dist/react-datepicker.css";
// import { useNavigate, useLocation } from "react-router-dom";

// // Define initial empty state for one licensee
// const initialLicenseeValues = {
//   licenseName: "",
//   address: "",
//   email: "",
//   contact: "",
//   dateOfAgreementSigning: null,
//   typeOfLicense: "",
//   staRegionalGeography: "",
//   detailsOfExclusivity: "",
//   dateOfLicense: null,
//   licenseValidUntil: null,
//   paymentTerms: "",
// };

// const SectionThree = () => {
//   const navigate = useNavigate();
//   const location = useLocation();

//   const [technologyRefNo] = useState(location.state?.technologyRefNo || "");

//   // State for the *list* of all licensees (jo abhi save nahi hue)
//   const [licensees, setLicensees] = useState([]);

//   // NEW STATE: Database se save hokar aaya data yahan store hoga
//   const [savedLicensees, setSavedLicensees] = useState([]);

//   // State for dynamic royalty and premia for the *current* form
//   const [royalty, setRoyalty] = useState([
//     { royaltyAmount: "", royaltyDate: null },
//   ]);
//   const [premia, setPremia] = useState([
//     { premiaAmount: "", premiaDate: null },
//   ]);

//   // State to track which licensee is being edited (index)
//   const [editingIndex, setEditingIndex] = useState(null);

//   const minDate = new Date("1900-08-12");
//   const maxDate = new Date("3000-08-12");

//   // Validation schema
//   const validationSchema = Yup.object({
//     licenseName: Yup.string()
//       .max(300, "Max. 300 characters")
//       .required("Required"),
//     address: Yup.string().max(500, "Max. 500 characters"),
//     email: Yup.string().email("Invalid email format"),
//     contact: Yup.string().matches(/^[0-9]{10}$/, "Must be 10 digits"),
//     dateOfAgreementSigning: Yup.date().nullable().required("Required"),
//     typeOfLicense: Yup.string().required("Required"),
//     staRegionalGeography: Yup.string().required("Required"),
//     detailsOfExclusivity: Yup.string().max(300, "Max. 300 characters"),
//     dateOfLicense: Yup.date().nullable().required("Required"),
//     licenseValidUntil: Yup.date().nullable().required("Required"),
//     paymentTerms: Yup.string().max(300, "Max. 300 characters"),
//   });

//   // Handle FINAL submit (Save button)
//   const handleSubmit = () => {
//     if (editingIndex !== null) {
//       Swal.fire({
//         title: "Update Pending",
//         text: "Please finish editing the current licensee by clicking 'Update Licensee' before saving.",
//         icon: "warning",
//         confirmButtonText: "OK",
//       });
//       return;
//     }

//     if (licensees.length === 0) {
//       Swal.fire({
//         title: "No Licensees Added",
//         text: "Please add at least one licensee using the 'Add New Licensee' button before saving.",
//         icon: "warning",
//         confirmButtonText: "OK",
//       });
//       return;
//     }

//     axios
//       .post(
//         `http://172.16.2.246:8080/api/section-three/save/${technologyRefNo}`,
//         licensees,
//         {
//           headers: { "Content-Type": "application/json" },
//         }
//       )
//       .then((response) => { // 'response' ko yahan receive karein
//         Swal.fire({
//           title: "Success!",
//           text: "All licensees submitted successfully!",
//           icon: "success",
//           confirmButtonText: "OK",
//         });

//         // YEH HAI IMPORTANT CHANGE
//         setSavedLicensees(response.data); // Database se aaye data ko 'savedLicensees' state mein daalein
//         setLicensees([]); // Purane 'licensees' array (temporary) ko khaali karein
//         setEditingIndex(null);
//       })
//       .catch((error) => {
//         console.error(error);
//         Swal.fire({
//           title: "Error!",
//           text:
//             error?.response?.data?.message ||
//             "Form submission failed. Please try again.",
//           icon: "error",
//           confirmButtonText: "OK",
//         });
//       });
//   };

//   // --- Royalties handlers ---
//   const handleAddRoyalty = () => {
//     setRoyalty([...royalty, { royaltyAmount: "", royaltyDate: null }]);
//   };
//   const handleRemoveRoyalty = (index) => {
//     if (royalty.length > 1) {
//       const list = [...royalty];
//       list.splice(index, 1);
//       setRoyalty(list);
//     }
//   };
//   const handleRoyaltyChange = (index, field, value) => {
//     const list = [...royalty];
//     list[index][field] = value;
//     setRoyalty(list);
//   };

//   // --- Premias handlers ---
//   const handleAddPremia = () => {
//     setPremia([...premia, { premiaAmount: "", premiaDate: null }]);
//   };
//   const handleRemovePremia = (index) => {
//     if (premia.length > 1) {
//       const list = [...premia];
//       list.splice(index, 1);
//       setPremia(list);
//     }
//   };
//   const handlePremiaChange = (index, field, value) => {
//     const list = [...premia];
//     list[index][field] = value;
//     setPremia(list);
//   };

//   // Calculate totals for the *current* form
//   const subTotalRoyalty = royalty.reduce(
//     (acc, cur) => acc + parseFloat(cur.royaltyAmount || 0),
//     0
//   );
//   const subTotalPremia = premia.reduce(
//     (acc, cur) => acc + parseFloat(cur.premiaAmount || 0),
//     0
//   );
//   const grandTotal = subTotalRoyalty + subTotalPremia;

//   // Function to remove a licensee from the list
//   const handleRemoveLicensee = (indexToRemove) => {
//     Swal.fire({
//       title: "Are you sure?",
//       text: "You won't be able to revert this!",
//       icon: "warning",
//       showCancelButton: true,
//       confirmButtonColor: "#3085d6",
//       cancelButtonColor: "#d33",
//       confirmButtonText: "Yes, delete it!",
//     }).then((result) => {
//       if (result.isConfirmed) {
//         setLicensees((prevLicensees) =>
//           prevLicensees.filter((_, i) => i !== indexToRemove)
//         );
//         // If the item being removed was the one being edited, clear editing state
//         if (editingIndex === indexToRemove) {
//           setEditingIndex(null);
//           // Note: Form reset is handled by 'handleAddOrUpdateLicensee' or 'Cancel Edit'
//         }
//         Swal.fire("Deleted!", "The licensee has been removed.", "success");
//       }
//     });
//   };

//   return (
//     <>
//       <NavBar />
//       <div className="flex flex-col md:flex-row">
//         <div className="bg-gray-800"></div>
//         <div className="flex-1 p-8 bg-blue-200 border">
//           <Section sectionLine="Section 3 : Details of Licensee (Commercialization)" />

//           {/* NEW: SAVED DATA DISPLAY BLOCK */}
//           {savedLicensees.length > 0 && (
//             <div className="mb-6 p-4 bg-green-100 border border-green-400 rounded shadow">
//               <h3 className="text-xl font-bold mb-2 text-green-700">
//                 Successfully Saved Data
//                 <span className="text-sm font-normal ml-2">(Remark: Saved)</span>
//               </h3>
//               <ul className="list-disc list-inside">
//                 {savedLicensees.map((lic, index) => (
//                   <li
//                     key={lic.id} // Ab hum database ID use kar sakte hain
//                     className="text-gray-700 mb-1"
//                   >
//                     <span>
//                       {index + 1}. {lic.licenseName} (DB ID: {lic.id})
//                       <br />
//                       <span className="text-sm text-gray-600 ml-4">
//                         Total Fee: {lic.totalLicenseFee.toFixed(2)} INR
//                       </span>
//                     </span>
//                     {/* Yahan Edit/Remove buttons nahi hain kyunki yeh saved data hai */}
//                   </li>
//                 ))}
//               </ul>
//               <p className="mt-2 font-semibold text-green-700">
//                 This data is now saved. You can add more licensees below.
//               </p>
//             </div>
//           )}

//           <Formik
//             initialValues={initialLicenseeValues}
//             validationSchema={validationSchema}
//             enableReinitialize={false} // Keep this false
//             onSubmit={() => {
//               // This onSubmit is still needed by Formik,
//               // but our main save button will bypass it.
//               console.log(
//                 "Formik onSubmit triggered, but save is handled by onClick."
//               );
//             }}
//           >
//             {({
//               errors,
//               touched,
//               setFieldValue,
//               values,
//               validateForm,
//               resetForm,
//             }) => {
//               // Function to load licensee data into the form for editing
//               const handleEditLoad = (licenseeToEdit, index) => {
//                 setEditingIndex(index);

//                 // Populate Formik fields
//                 setFieldValue("licenseName", licenseeToEdit.licenseName);
//                 setFieldValue("address", licenseeToEdit.address);
//                 setFieldValue("email", licenseeToEdit.email);
//                 setFieldValue("contact", licenseeToEdit.contact);
//                 setFieldValue(
//                   "dateOfAgreementSigning",
//                   licenseeToEdit.dateOfAgreementSigning
//                     ? new Date(licenseeToEdit.dateOfAgreementSigning)
//                     : null
//                 );
//                 setFieldValue("typeOfLicense", licenseeToEdit.typeOfLicense);
//                 setFieldValue(
//                   "staRegionalGeography",
//                   licenseeToEdit.staRegionalGeography
//                 );
//                 setFieldValue(
//                   "detailsOfExclusivity",
//                   licenseeToEdit.detailsOfExclusivity
//                 );
//                 setFieldValue(
//                   "dateOfLicense",
//                   licenseeToEdit.dateOfLicense
//                     ? new Date(licenseeToEdit.dateOfLicense)
//                     : null
//                 );
//                 setFieldValue(
//                   "licenseValidUntil",
//                   licenseeToEdit.licenseValidUntil
//                     ? new Date(licenseeToEdit.licenseValidUntil)
//                     : null
//                 );
//                 setFieldValue("paymentTerms", licenseeToEdit.paymentTerms);

//                 // Populate royalty and premia arrays
//                 setRoyalty(
//                   licenseeToEdit.royalty.map((r) => ({
//                     royaltyAmount: String(r.amount),
//                     royaltyDate: r.date ? new Date(r.date) : null,
//                   }))
//                 );
//                 setPremia(
//                   licenseeToEdit.premia.map((p) => ({
//                     premiaAmount: String(p.amount),
//                     premiaDate: p.date ? new Date(p.date) : null,
//                   }))
//                 );

//                 Swal.fire({
//                   title: "Editing Licensee",
//                   text: `Now editing: ${licenseeToEdit.licenseName}. Update fields and click 'Update Licensee'.`,
//                   icon: "info",
//                   confirmButtonText: "OK",
//                 });
//               };

//               // Function to add a new licensee or update an existing one
//               const handleAddOrUpdateLicensee = async () => {
//                 const formErrors = await validateForm();
//                 if (Object.keys(formErrors).length > 0) {
//                   // This check prevents adding an empty form to the array
//                   Swal.fire({
//                     title: "Incomplete Form",
//                     text: "Please fill all required fields correctly before adding/updating.",
//                     icon: "error",
//                   });
//                   return;
//                 }

//                 // Create the licensee object from form values
//                 const licenseeData = {
//                   licenseName: values.licenseName,
//                   address: values.address,
//                   email: values.email,
//                   contact: values.contact,
//                   dateOfAgreementSigning: values.dateOfAgreementSigning
//                     ? values.dateOfAgreementSigning.toISOString().split("T")[0]
//                     : null,
//                   typeOfLicense: values.typeOfLicense,
//                   staRegionalGeography: values.staRegionalGeography,
//                   detailsOfExclusivity: values.detailsOfExclusivity,
//                   dateOfLicense: values.dateOfLicense
//                     ? values.dateOfLicense.toISOString().split("T")[0]
//                     : null,
//                   licenseValidUntil: values.licenseValidUntil
//                     ? values.licenseValidUntil.toISOString().split("T")[0]
//                     : null,
//                   paymentTerms: values.paymentTerms,
//                   royalty: royalty.map((r) => ({
//                     amount: parseFloat(r.royaltyAmount || "0"),
//                     date: r.royaltyDate
//                       ? r.royaltyDate.toISOString().split("T")[0]
//                       : null,
//                   })),
//                   premia: premia.map((p) => ({
//                     amount: parseFloat(p.premiaAmount || "0"),
//                     date: p.premiaDate
//                       ? p.premiaDate.toISOString().split("T")[0]
//                       : null,
//                   })),
//                   subTotalRoyalty: subTotalRoyalty,
//                   subTotalPremia: subTotalPremia,
//                   totalLicenseFee: grandTotal,
//                 };

//                 if (editingIndex !== null) {
//                   // Update existing licensee
//                   const updatedLicensees = [...licensees];
//                   updatedLicensees[editingIndex] = licenseeData;
//                   setLicensees(updatedLicensees);
//                   Swal.fire({
//                     title: "Licensee Updated!",
//                     text: "Licensee details have been updated.",
//                     icon: "success",
//                   });
//                 } else {
//                   // Add new licensee
//                   setLicensees((prevLicensees) => [
//                     ...prevLicensees,
//                     licenseeData,
//                   ]);
//                   Swal.fire({
//                     title: "Licensee Added!",
//                     text: "Licensee has been added to the list. You can add another one or click 'Save'.",
//                     icon: "success",
//                   });
//                 }

//                 // Reset form fields after adding/updating
//                 resetForm({ values: initialLicenseeValues });
//                 setRoyalty([{ royaltyAmount: "", royaltyDate: null }]);
//                 setPremia([{ premiaAmount: "", premiaDate: null }]);
//                 setEditingIndex(null); // Clear editing state
//               };

//               return (
//                 <>
//                   {/* Display Added Licensees (MOVED INSIDE FORMIK) */}
//                   {/* TITLE CHANGED */}
//                   {licensees.length > 0 && (
//                     <div className="mb-6 p-4 bg-white rounded shadow">
//                       <h3 className="text-xl font-bold mb-2">
//                         Licensees Pending Save ({licensees.length})
//                       </h3>
//                       <ul className="list-disc list-inside">
//                         {licensees.map((lic, index) => (
//                           <li
//                             key={index}
//                             className={`text-gray-700 mb-1 flex justify-between items-center ${
//                               editingIndex === index
//                                 ? "bg-yellow-100 p-2 rounded"
//                                 : ""
//                             }`}
//                           >
//                             <span>
//                               {index + 1}. {lic.licenseName} (Total Fee:{" "}
//                               {lic.totalLicenseFee
//                                 ? lic.totalLicenseFee.toFixed(2)
//                                 : "N/A"}{" "}
//                               INR)
//                               {editingIndex === index && (
//                                 <span className="ml-2 text-blue-500 font-semibold">
//                                   (Currently Editing)
//                                 </span>
//                               )}
//                             </span>
//                             <div>
//                               <button
//                                 type="button"
//                                 onClick={() => handleEditLoad(lic, index)} // CORRECTED: Calls function inside Formik
//                                 className="bg-yellow-500 text-white px-3 py-1 rounded text-sm mr-2"
//                                 disabled={editingIndex !== null} // Disable edit while another edit is active
//                               >
//                                 Edit
//                               </button>
//                               <button
//                                 type="button"
//                                 onClick={() => handleRemoveLicensee(index)}
//                                 className="bg-red-500 text-white px-3 py-1 rounded text-sm"
//                               >
//                                 Remove
//                               </button>
//                             </div>
//                           </li>
//                         ))}
//                       </ul>
//                       <p className="mt-2 font-semibold">
//                         Total {licensees.length} licensee(s) added. Click 'Save'
//                         to submit all.
//                       </p>
//                     </div>
//                   )}

//                   <Form>
//                     {/* Technology Ref No */}
//                     <div className="form-group mb-2">
//                       <label className="font-bold flex justify-between">
//                         Technology / Knowhow Ref No:
//                         <span className="Hint block text-xs text-red-500 inline text-end">
//                           Mandatory Field
//                         </span>
//                       </label>
//                       <input
//                         type="text"
//                         className="w-half p-1 text-lg outline-0.1 rounded-md bg-gray-200"
//                         value={technologyRefNo}
//                         readOnly
//                       />
//                     </div>

//                     {/* License Name */}
//                     <div className="form-group mb-2 flex flex-col">
//                       <label className="font-bold">
//                         Licensee Name
//                         <span className="Hint block text-sm text-red-500">
//                           Max. 300 Characters
//                         </span>
//                       </label>
//                       <Field
//                         as="textarea"
//                         maxLength="300"
//                         name="licenseName"
//                         type="text"
//                         className="w-half p-1 text-lg outline-0.1 rounded-md"
//                       />
//                       <ErrorMessage
//                         name="licenseName"
//                         component="div"
//                         className="text-red-500"
//                       />
//                     </div>

//                     {/* Address */}
//                     <div className="form-group mb-2 flex flex-col">
//                       <label className="font-bold text-sm">Address</label>
//                       <Field
//                         as="textarea"
//                         maxLength="500"
//                         name="address"
//                         type="text"
//                         className="w-half text-lg outline-0.1 rounded-md"
//                       />
//                       <ErrorMessage
//                         name="address"
//                         component="div"
//                         className="text-red-500"
//                       />
//                     </div>

//                     {/* Email */}
//                     <div className="form-group mb-2 flex flex-col">
//                       <label className="font-bold">Email</label>
//                       <Field
//                         as="input"
//                         name="email"
//                         type="email"
//                         className="w-half p-1 text-lg outline-0.1 rounded-md"
//                       />
//                       <ErrorMessage
//                         name="email"
//                         component="div"
//                         className="text-red-500"
//                       />
//                     </div>

//                     {/* Contact No */}
//                     <div className="form-group mb-2 flex flex-col">
//                       <label className="font-bold">Contact No</label>
//                       <Field
//                         as="input"
//                         maxLength="10"
//                         name="contact"
//                         type="text"
//                         className="w-half p-1 text-lg outline-0.1 rounded-md"
//                       />
//                       <ErrorMessage
//                         name="contact"
//                         component="div"
//                         className="text-red-500"
//                       />
//                     </div>

//                     {/* Date of Agreement Signing */}
//                     <div className="form-group mb-2 flex flex-col">
//                       <label className="font-bold mb-1">
//                         Date of Agreement Signing
//                       </label>
//                       <DatePicker
//                         selected={values.dateOfAgreementSigning}
//                         onChange={(date) => {
//                           setFieldValue("dateOfAgreementSigning", date);
//                         }}
//                         dateFormat="dd/MM/yyyy"
//                         minDate={minDate}
//                         maxDate={maxDate}
//                         placeholderText="Select Date"
//                         className="w-half p-1 text-lg outline-0.1 rounded-md"
//                       />
//                       <ErrorMessage
//                         name="dateOfAgreementSigning"
//                         component="div"
//                         className="text-red-500"
//                       />
//                     </div>

//                     {/* Type of License */}
//                     <div className="form-group mb-2 flex flex-col">
//                       <label className="font-bold">Type of License</label>
//                       <Field
//                         as="select"
//                         name="typeOfLicense"
//                         className="w-half p-1 text-lg outline-0.1 rounded-md"
//                       >
//                         <option value="">--Please Select--</option>
//                         <option value="Exclusive">Exclusive</option>
//                         <option value="Non-Exclusive">Non-Exclusive</option>
//                       </Field>
//                       <ErrorMessage
//                         name="typeOfLicense"
//                         component="div"
//                         className="text-red-500"
//                       />
//                     </div>

//                     {/* Regional Geography */}
//                     <div className="form-group mb-2 flex flex-col">
//                       <label className="font-bold">Regional Geography</label>
//                       <Field
//                         as="select"
//                         name="staRegionalGeography"
//                         className="w-half p-1 text-lg outline-0.1 rounded-md"
//                       >
//                         <option value="">--Please Select--</option>
//                         <option value="North">North</option>
//                         <option value="North-East">North-East</option>
//                         <option value="East">East</option>
//                         <option value="West">West</option>
//                         <option value="South">South</option>
//                       </Field>
//                       <ErrorMessage
//                         name="staRegionalGeography"
//                         component="div"
//                         className="text-red-500"
//                       />
//                     </div>

//                     {/* Details of Exclusivity */}
//                     <div className="form-group mb-2">
//                       <label className="font-bold">
//                         Details of Exclusivity:&nbsp;
//                         <span className="Hint block text-sm text-red-500 inline">
//                           Max. 300 Characters
//                         </span>
//                       </label>
//                       <Field
//                         as="textarea"
//                         name="detailsOfExclusivity"
//                         maxLength="300"
//                         className="w-full p-1 text-lg outline-0.1 rounded-md"
//                       />
//                       <ErrorMessage
//                         name="detailsOfExclusivity"
//                         component="div"
//                         className="text-red-500"
//                       />
//                     </div>

//                     {/* Date of License */}
//                     <div className="form-group mb-2">
//                       <label className="font-bold">
//                         Date of License &nbsp;
//                       </label>
//                       <DatePicker
//                         selected={values.dateOfLicense}
//                         onChange={(date) => {
//                           setFieldValue("dateOfLicense", date);
//                         }}
//                         dateFormat="dd/MM/yyyy"
//                         minDate={minDate}
//                         maxDate={maxDate}
//                         placeholderText="Select Date"
//                         className="w-full p-1 text-lg outline-0.1 rounded-md"
//                       />
//                       <ErrorMessage
//                         name="dateOfLicense"
//                         component="div"
//                         className="text-red-500"
//                       />
//                     </div>

//                     {/* License Valid Until */}
//                     <div className="form-group mb-2">
//                       <label className="font-bold">
//                         License Valid Until &nbsp;
//                       </label>
//                       <DatePicker
//                         selected={values.licenseValidUntil}
//                         onChange={(date) => {
//                           setFieldValue("licenseValidUntil", date);
//                         }}
//                         dateFormat="dd/MM/yyyy"
//                         minDate={minDate}
//                         maxDate={maxDate}
//                         placeholderText="Select Date"
//                         className="w-full p-1 text-lg outline-0.1 rounded-md"
//                       />
//                       <ErrorMessage
//                         name="licenseValidUntil"
//                         component="div"
//                         className="text-red-500"
//                       />
//                     </div>

//                     {/* Payment Terms */}
//                     <div className="form-group mb-2">
//                       <label className="font-bold">
//                         Payment Terms &nbsp;
//                         <span className="Hint block text-sm text-red-500 inline">
//                           Max. 300 Characters
//                         </span>
//                       </label>
//                       <Field
//                         type="text"
//                         name="paymentTerms"
//                         maxLength="300"
//                         className="w-full p-1 text-lg outline-0.1 rounded-md"
//                       />
//                       <ErrorMessage
//                         name="paymentTerms"
//                         component="div"
//                         className="text-red-500"
//                       />
//                     </div>

//                     {/* --- Royalties Section --- */}
//                     <div className="mb-6">
//                       <h3 className="text-xl font-bold mb-2">Royalties</h3>
//                       {royalty.map((item, index) => (
//                         <div
//                           key={index}
//                           className="flex flex-wrap gap-4 mb-4 items-center"
//                         >
//                           <div>
//                             <label className="block font-semibold">
//                               Royalty Amount:
//                             </label>
//                             <input
//                               type="number"
//                               min="0"
//                               step="0.01"
//                               className="p-1 rounded border w-40"
//                               value={item.royaltyAmount}
//                               onChange={(e) =>
//                                 handleRoyaltyChange(
//                                   index,
//                                   "royaltyAmount",
//                                   e.target.value
//                                 )
//                               }
//                               placeholder="Enter Amount"
//                             />
//                           </div>
//                           <div>
//                             <label className="block font-semibold">
//                               Royalty Date:
//                             </label>
//                             <DatePicker
//                               selected={item.royaltyDate}
//                               onChange={(date) =>
//                                 handleRoyaltyChange(index, "royaltyDate", date)
//                               }
//                               dateFormat="dd/MM/yyyy"
//                               minDate={minDate}
//                               maxDate={maxDate}
//                               placeholderText="Select Date"
//                               className="p-1 rounded border w-40"
//                             />
//                           </div>
//                           <div>
//                             <button
//                               type="button"
//                               onClick={() => handleRemoveRoyalty(index)}
//                               className="bg-red-600 text-white px-3 py-1 rounded mt-6"
//                               disabled={royalty.length === 1}
//                               title={
//                                 royalty.length === 1
//                                   ? "At least one royalty entry required"
//                                   : "Remove royalty"
//                               }
//                             >
//                               Remove
//                             </button>
//                           </div>
//                         </div>
//                       ))}
//                       <button
//                         type="button"
//                         onClick={handleAddRoyalty}
//                         className="bg-green-600 text-white px-4 py-2 rounded"
//                       >
//                         Add Royalty
//                       </button>
//                     </div>

//                     {/* Subtotal Royalty */}
//                     <div className="mb-6 font-bold">
//                       Subtotal Royalty: {subTotalRoyalty.toFixed(2)}
//                     </div>

//                     {/* --- Premias Section --- */}
//                     <div className="mb-6">
//                       <h3 className="text-xl font-bold mb-3">Premias</h3>
//                       {premia.map((item, index) => (
//                         <div
//                           key={index}
//                           className="flex flex-wrap gap-4 mb-4 items-center"
//                         >
//                           <div>
//                             <label className="block font-semibold">
//                               Premia Amount:
//                             </label>
//                             <input
//                               type="number"
//                               min="0"
//                               step="0.01"
//                               className="p-1 rounded border w-40"
//                               value={item.premiaAmount}
//                               onChange={(e) =>
//                                 handlePremiaChange(
//                                   index,
//                                   "premiaAmount",
//                                   e.target.value
//                                 )
//                               }
//                               placeholder="Enter Amount"
//                             />
//                           </div>
//                           <div>
//                             <label className="block font-semibold">
//                               Premia Date:
//                             </label>
//                             <DatePicker
//                               selected={item.premiaDate}
//                               onChange={(date) =>
//                                 handlePremiaChange(index, "premiaDate", date)
//                               }
//                               dateFormat="dd/MM/yyyy"
//                               minDate={minDate}
//                               maxDate={maxDate}
//                               placeholderText="Select Date"
//                               className="p-1 rounded border w-40"
//                             />
//                           </div>
//                           <div>
//                             <button
//                               type="button"
//                               onClick={() => handleRemovePremia(index)}
//                               className="bg-red-600 text-white px-3 py-1 rounded mt-6"
//                               disabled={premia.length === 1}
//                               title={
//                                 premia.length === 1
//                                   ? "At least one premia entry required"
//                                   : "Remove premia"
//                               }
//                             >
//                               Remove
//                             </button>
//                           </div>
//                         </div>
//                       ))}
//                       <button
//                         type="button"
//                         onClick={handleAddPremia}
//                         className="bg-green-600 text-white px-4 py-2 rounded"
//                       >
//                         Add Premia
//                       </button>
//                     </div>

//                     {/* Premia Subtotal */}
//                     <div className="form-group mb-4">
//                       <label className="font-bold" htmlFor="subTotalPremia">
//                         Subtotal Premia Received (in INR)
//                       </label>
//                       <Field
//                         type="number"
//                         name="subTotalPremia"
//                         className="w-half p-1 text-lg outline-0.1 rounded-md bg-gray-200"
//                         value={subTotalPremia}
//                         readOnly
//                       />
//                     </div>

//                     {/* Grand Total */}
//                     <div className="form-group mb-4">
//                       <label className="font-bold" htmlFor="GrandTotal">
//                         Total Licensee Fee (in INR)
//                       </label>
//                       <Field
//                         type="number"
//                         name="GrandTotal"
//                         className="w-half p-1 text-lg outline-0.1 rounded-md bg-gray-200"
//                         value={grandTotal}
//                         readOnly
//                       />
//                       <br />

//                       {/* Conditional Button for Add/Update Licensee */}
//                       <button
//                         type="button"
//                         onClick={handleAddOrUpdateLicensee}
//                         className={`px-6 py-3 rounded mt-3 ml-9 ${
//                           editingIndex !== null
//                             ? "bg-purple-600 hover:bg-purple-700"
//                             : "bg-blue-600 hover:bg-blue-700"
//                         } text-white`}
//                       >
//                         {editingIndex !== null
//                           ? "Update Licensee"
//                           : "Add New Licensee"}
//                       </button>
//                       {editingIndex !== null && (
//                         <button
//                           type="button"
//                           onClick={() => {
//                             resetForm({ values: initialLicenseeValues });
//                             setRoyalty([
//                               { royaltyAmount: "", royaltyDate: null },
//                             ]);
//                             setPremia([
//                               { premiaAmount: "", premiaDate: null },
//                             ]);
//                             setEditingIndex(null); // Exit editing mode
//                           }}
//                           className="bg-gray-500 text-white px-6 py-3 rounded mt-3 ml-4 hover:bg-gray-600"
//                         >
//                           Cancel Edit
//                         </button>
//                       )}
//                     </div>

//                     {/* --- Navigation Buttons --- */}
//                     <div className="flex justify-center items-center gap-4 mt-4">
//                       <button
//                         type="button"
//                         onClick={() =>
//                           navigate("/sectionTwo", {
//                             state: { technologyRefNo },
//                           })
//                         }
//                         className="bg-blue-600 text-white px-6 py-3 rounded"
//                       >
//                         Previous
//                       </button>

//                       <button
//                         type="button"
//                         onClick={handleSubmit}
//                         className="bg-green-600 text-white px-6 py-3 rounded"
//                         disabled={editingIndex !== null}
//                       >
//                         Save All Licensees
//                       </button>

//                       <button
//                         type="button"
//                         onClick={() =>
//                           navigate("/sectionFour", {
//                             state: { technologyRefNo },
//                           })
//                         }
//                         className="bg-indigo-600 text-white px-6 py-3 rounded"
//                       >
//                         Next
//                       </button>
//                     </div>
//                   </Form>
//                 </>
//               );
//             }}
//           </Formik>
//         </div>
//       </div>
//       <FooterBar />
//     </>
//   );
// };

// export default SectionThree;